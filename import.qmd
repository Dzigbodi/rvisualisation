---
title: "Lecture des données"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


Ce module introduit la lecture des données dans `R`.

## Importation des données

### Importer un ficher `txt`

Pour importer un fichier `txt` on utilise les fonctions suivantes: - `read.table()` - `read.delimit()` Dans cet exemple, nous allons importer l'indice des prix à la consommation. Noter que le séparateur c'est une tabulation (`sep="\t"`), et la première ligne correspond au nom des variables (`header=TRUE`).

```{r}
Prix<-read.table("./data/Prix.txt", sep="\t", header = TRUE)
```

```{r}
head(Prix,2)
```

Avec la fonction `read.delim()` nous allons importer les dictionnaire des données

```{r}
dictionnaire<-read.delim("./data/Dictionnaire.txt", sep = "\t", header = TRUE)
```

```{r}
head(dictionnaire,2)
```

### Importer un ficher `csv`

On uilise la fonction `read.csv()` pour importer les fichiers `csv`. Nous reprenons les mêmes données dans un format `csv`.

```{r}
Prix<-read.csv("./data/Prix.csv")
```

```{r}
head(Prix,2)
```

### Importer un ficher `xlsx`

Pour importer les fichierx xlsx nous nous servons de la librairie `openxlsx`. Dans cette libraire, la fonction `read.xlsx()` permet l'importation un fichier Excel.

```{r}
library(openxlsx)
PR<-read.xlsx(xlsxFile = "./data/Immigration.xlsx", sheet = "Immigration")
```

```{r}
head(PR,2)
```

Nous pouvons également préciser les plages de cellules à importer en utilisant `namedRegion`.

```{r}
PR<-read.xlsx(xlsxFile = "./data/Immigration.xlsx",  namedRegion= "PR")
head(PR,2)

```

Om peut également les fichiers d'extension `rdata` qui sont réserver à `R` en utilisant la fonction `load()`.

### exporter les data.frame 
Tout comme importer les fichiers dans R, on peut également exporter les tables de données en d'autres format de données.

- Pour les fichiers de type `.txt`: `write.table()`
- Pour les fichiers de type `.csv`: `write.csv()`
- Pour les fichiers de type `.xlsx`: `write.xlsx()`


## Rappel sur les format Date et factors

### Format Date

### Variable catégorielle ou Nominale

R reconnait également les formats `date`. 

- La fonction `Sys.Date()` permet de récupérer la date du système.

```{r}
Sys.Date()
```

On peut changer le format des dates.

```{r}
format(Sys.Date(), "%a %b %d")
```

```{r}
format(Sys.Date(), "%Y/%m/%d")
```

Nous pouvons également convertir une variable numérique ou une variable de type caractère en format `date` avec la fonction `as.Date()`.

```{r}
x <- c("02/27/00", "02/27/00", "01/14/00")
(z <- as.Date(x, format="%m/%d/%y"))
```

Lorsqu'on importe une date d'excel, le format date se transforme en numérique. Pour le convertir en format date, on utilise:
- origin="1899-12-30" si c'est le SO est un windows
- origin="1904-01-01" si le SO est un mac

```{r}
as.Date(40000, origin = "1899-12-30")
```

```{r}
as.Date(40000, origin = "1904-01-01")
```

- Nous pouvons générer les séquences de date à partir d'une date de début et/ou d'une date de fin avec la fonction seq.Date( )
```{r}
seq.Date(from=as.Date("2020/01/01"), to=as.Date("2020/01/15"), by="day")
```

```{r}
seq.Date(from=as.Date("2020/01/01"), length=15, by="day")
```

Dans la fonction `seq.Date()` `by` peut prendre `month`, `quarter`, `year`
-   La fonction `factor()` sert à créer une variable catégorielle

```{r}
genre<-factor(c("Masculin","Féminin","Masculin","Masculin","Féminin","Féminin","Féminin"))
genre
```

-   La fonction `levels()` sert à définir les modalités.

```{r}
levels(genre) 
```

-   Pour labelliser une variable catégorielle

```{r}
genre<-c(1,1,1,2,2,1,2,1)
genre<-factor(genre, levels=c(1,2), labels=c("Masculin","Féminin"))
genre
```

-   La fonction `relevel()` permet de redéfinir le label de référence (très utile pour les modèles logit)

```{r}
levels(genre)
genre<-relevel(genre, ref=2)
levels(genre)
```

-   La fonction `revalue()` de la librairie `plyr` permet de recoder les labels,

```{r}
levels(genre)
genre_r<-plyr:: revalue(genre, c("Masculin"="Homme","Féminin"="Femme"))
levels(genre_r)
```

